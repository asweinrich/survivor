generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  name             String
  passwordHash     String
  createdAt        DateTime        @default(now())

  playerTribes     Int[]           @map("playerTribes")
  playerTribesRel  PlayerTribe[]   @relation("PlayerToTribes")

  badges           UserBadge[]     @relation("PlayerBadges")

}

model PlayerTribe {
  id         Int      @id @default(autoincrement())
  playerId   Int
  player     Player   @relation("PlayerToTribes", fields: [playerId], references: [id]) // âœ… Link back
  tribeName  String
  color      String
  emoji      String
  createdAt  DateTime @default(now())
  season     Int
  pastScore  Int      @default(1)
  tribeArray Int[]
  paid       Boolean? @default(false)
}


model Contestant {
  id           Int      @id @default(autoincrement())
  name         String
  img          String
  hometown     String
  profession   String
  inPlay       Boolean  @default(true)
  madeMerge    Boolean? @default(false)
  top3         Boolean? @default(false)
  soleSurvivor Boolean? @default(false)
  immunityWins Int      @default(0)
  tribalWins   Int      @default(0)
  hiddenIdols  Int      @default(0)
  rewards      Int      @default(0)
  voteOutOrder Int?
  createdAt    DateTime @default(now())
  episodes     Int      @default(0)
  madeFire     Boolean? @default(false)
  tribes       Int[]
  season       Int
  advantages   Int      @default(0)
  age          Int      @default(30)
  pastSeasons  Json?    // Stores array of { seasonName, color }
}

model ShowTribe {
  id         Int      @id @default(autoincrement())
  name       String
  season     Int
  color      String
  created_at DateTime @default(now())
}

model Recap {
  id           Int      @id @default(autoincrement())
  contestantId Int
  season       Int
  headline     String
  body         String
  created_at   DateTime @default(now())
  media_url    String?
}

model WeeklyRecap {
  id         Int      @id @default(autoincrement())
  season     Int
  week       Int
  headline   String
  body       String
  winner     Int
  loser      Int
  created_at DateTime @default(now())
}

model TribalCouncilVote {
  id        Int  @id @default(autoincrement())
  voter     Int
  target    Int? 
  council   Int
  round     Int
  tribe     Int
  note      String?  
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserBadge {
  id          Int       @id @default(autoincrement())
  name        String
  emoji       String?
  description String
  color       String
  rank        Int?
  created_at  DateTime  @default(now())
  players     Player[]  @relation("PlayerBadges")
}

