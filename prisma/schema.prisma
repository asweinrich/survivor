generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  name            String
  passwordHash    String
  createdAt       DateTime      @default(now())
  playerTribes    Int[]         @map("playerTribes")
  picks           Pick[]        @relation("PlayerToPicks")
  playerTribesRel PlayerTribe[] @relation("PlayerToTribes")
  badges          UserBadge[]   @relation("PlayerBadges")
}

model PlayerTribe {
  id         Int      @id @default(autoincrement())
  playerId   Int
  tribeName  String
  color      String
  emoji      String
  createdAt  DateTime @default(now())
  season     Int
  tribeArray Int[]
  paid       Boolean? @default(false)
  pastScore  Int      @default(1)
  player     Player   @relation("PlayerToTribes", fields: [playerId], references: [id])
}

model Contestant {
  id           Int      @id @default(autoincrement())
  name         String
  img          String
  hometown     String
  profession   String
  inPlay       Boolean  @default(true)
  madeMerge    Boolean? @default(false)
  top3         Boolean? @default(false)
  soleSurvivor Boolean? @default(false)
  immunityWins Int      @default(0)
  tribalWins   Int      @default(0)
  hiddenIdols  Int      @default(0)
  rewards      Int      @default(0)
  voteOutOrder Int?
  createdAt    DateTime @default(now())
  episodes     Int      @default(0)
  madeFire     Boolean? @default(false)
  tribes       Int[]
  season       Int
  advantages   Int      @default(0)
  age          Int      @default(30)
  pastSeasons  Json?
}

model ShowTribe {
  id         Int      @id @default(autoincrement())
  name       String
  season     Int
  color      String
  created_at DateTime @default(now())
}

model Recap {
  id           Int      @id @default(autoincrement())
  contestantId Int
  season       Int
  headline     String
  body         String
  created_at   DateTime @default(now())
  media_url    String?
}

model WeeklyRecap {
  id         Int      @id @default(autoincrement())
  season     Int
  week       Int
  headline   String
  body       String
  winner     Int
  loser      Int
  created_at DateTime @default(now())
}

model TribalCouncilVote {
  id        Int      @id @default(autoincrement())
  council   Int
  round     Int
  tribe     Int
  note      String?
  createdAt DateTime @default(now())
  voter     Int
  target    Int?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserBadge {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  color       String
  created_at  DateTime @default(now())
  emoji       String?
  rank        Int?
  players     Player[] @relation("PlayerBadges")
}

model PickEm {
  id        Int          @id @default(autoincrement())
  season    Int
  week      Int
  question  String
  /// JSON array of option objects:
  /// [{ id: 101, type: "contestant" | "tribe" | "boolean" | "text",
  /// value: number | boolean | string, label: string, pointValue: number, meta?: any }]
  options   Json
  answers   Int[]        @default([])
  status    PickEmStatus @default(OPEN)
  createdAt DateTime     @default(now())
  picks     Pick[]
}

model Pick {
  id        Int      @id @default(autoincrement())
  /// FK to PickEm
  pickId    Int
  /// FK to your Player table
  playerId  Int
  /// The chosen option.id from PickEm.options
  selection Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pickEm    PickEm   @relation(fields: [pickId], references: [id])
  player    Player   @relation("PlayerToPicks", fields: [playerId], references: [id])

  @@unique([playerId, pickId])
  @@index([pickId])
}

enum PickEmStatus {
  OPEN
  LOCKED
  SCORED
}
